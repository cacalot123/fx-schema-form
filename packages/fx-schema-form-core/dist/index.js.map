{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap d8d9dcf218601bfe2cee","webpack:///./src/libs/resolve.ts","webpack:///./src/factory.ts","webpack:///./src/libs/factory.ts","webpack:///./src/index.ts","webpack:///./src/keys/index.ts","webpack:///./src/keys/ref.ts","webpack:///./src/keys/oneof.ts","webpack:///./src/types/index.ts","webpack:///./src/types/array.ts","webpack:///./src/types/object.ts","webpack:///./src/types/none.ts","webpack:///./src/libs/merge.ts","webpack:///./src/models/uischema.ts","webpack:///./src/models/jsonschema.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SchemaFormCore\"] = factory();\n\telse\n\t\troot[\"SchemaFormCore\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d8d9dcf218601bfe2cee","import { Ajv } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { schemaTypeFactory } from \"../factory\";\n\n// 去掉末尾的#正则\nconst regexp = /#$/g;\n\n/**\n * 解析schema中的字段，缓存到【schemaFieldFactory】中\n * 1. 验证schema的合法性\n * 2. 提取成map\n */\nexport default class ResolveLib {\n    public mergeSchema: JSONSchema6 = {};\n\n    constructor(private ajv: Ajv, schema: JSONSchema6, public readonly $id = \"\") {\n        // 验证schema的完整性\n        if (!$id) {\n            this.initSchema(ajv, schema);\n        }\n        // 生成map\n        this.compileSchema(schema, $id || schema.$ref || \"\");\n    }\n\n    /**\n     * 初始化schema\n     * 1. 判断$id，如果不存在，报错\n     * 2. 验证schema的结构是否正确，不正确报错\n     * 3. 若果ajv中不存在schema，则添加进ajv\n     * @param ajv     ajv的实例\n     * @param schema  schema\n     */\n    private initSchema(ajv: Ajv, schema: JSONSchema6): JSONSchema6 {\n        let $id: string | undefined = schema.$id;\n        // 如果没有$id, 同时没有$ref的情况下直接报错\n        if (!$id && !schema.$ref) {\n            throw new Error(`id is required by fx-schema-form-core.`);\n        }\n\n        // 验证schema的正确性\n        if (!ajv.validateSchema(schema)) {\n            throw ajv.errors;\n        }\n\n        // 把schema加入到ajv\n        if ($id && !ajv.getSchema($id)) {\n            ajv.addSchema(schema);\n        }\n\n        return schema;\n    }\n\n    /**\n     * 遍历schema，生成map\n     * 1. 如果schema.type不是string，报错\n     * 2. 调用【schemaTypeFactory\n     * @param schema  schema\n     */\n    private compileSchema(schema: JSONSchema6, $id: string): void {\n        schema = schemaTypeFactory.get(\"undefined\")(schema, $id || (schema.$id + \"#\"), this.ajv);\n\n        this.mergeSchema = schema;\n\n        // 如果不存在type，则直接返回\n        if (!schema.type || schema.$ref) {\n            return;\n        }\n\n        // 这里只解析type为字符串的结构，不支持数组类型的type\n        if (schema.type.constructor !== String) {\n            throw new Error(`schema type[${schema.type}] can only be string.`);\n        }\n\n        let type: string = schema.type.toString();\n\n        // 这里调用相对应的type的方法，来解析schema\n        if (schemaTypeFactory.has(type)) {\n            this.mergeSchema = schemaTypeFactory.get(type)(schema, $id || (schema.$id + \"#\"), this.ajv);\n        }\n    }\n\n    /**\n     * 解析path成成数据的路径\n     * 最终schema需要与uiSchema做合并，uiSchema中的key配置的是数组 [\"appType', '-','type']，所以需要做一下转换\n     * 1. 去掉properties，items关键字转换成【 - 】\n     * 2. 第一个字符去掉末尾的【 # 】\n     * @example design#/properties/appType => [\"appType']\n     * @example design#/properties/appType/type => [\"appType','type']\n     * @example design#/properties/appType/items/properties/type => [\"appType', '-','type']\n     * @param schemaKey schema的path\n     * @param keepFirst 是否需要保留第一个\n     */\n    public static getDataKeys(schemaKey: string, keepFirst = false): string[] {\n        let keys = schemaKey.split(\"/\").map((key: string, index: number) => {\n            // 第一个替换末尾的#\n            if (index === 0 && regexp.test(key)) {\n                // 这里是regexp的陷阱,需要修改lastIndex = 0\n                // 对于同一个正则表达式对象regex，不能重复调用：第一次返回true，第二次就返回false，很显然这种效果不是我们想要的。\n                // 这是因为RegExp.test()方法，第一次从位置0开始查找，可以匹配；第二次的查找位置就不是0了，说以就不能匹配了。\n                regexp.lastIndex = 0;\n                return keepFirst ? key.replace(regexp, \"\") : null;\n            }\n\n            // 去掉properties\n            if (key === \"properties\") {\n                return null;\n            }\n\n            // 转换items成-\n            if (key === \"items\") {\n                return \"-\";\n            }\n\n            return key;\n        });\n\n        // 提取其中不为空的项\n        return keys.filter((key: string | null) => {\n            return key !== null;\n        }) as string[];\n    }\n\n    /**\n     * 从schemaPath中获取$id\n     * @param schemaKey 当前schema的path\n     */\n    public static getSchemaId(schemaKey: string): string {\n        const keys = schemaKey.split(\"/\");\n\n        if (!keys.length) {\n            throw new Error(`${schemaKey} not a valid schemaPath.`);\n        }\n\n        return keys[0].replace(regexp, \"\");\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/libs/resolve.ts","import { Ajv } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { BaseFactory } from \"./libs/factory\";\nimport { FxJsonSchema } from \"./models/jsonschema\";\n\nexport let schemaFieldFactory = new BaseFactory<FxJsonSchema>();\nexport let schemaKeyWordFactory = new BaseFactory<(schema: JSONSchema6, ajv: Ajv) => JSONSchema6>();\nexport let schemaTypeFactory = new BaseFactory<(schema: JSONSchema6, $id: string, ajv: Ajv) => JSONSchema6>();\nexport let schemaKeysFactory = new BaseFactory<string>();\n\n/**\n * 遍历所有的keyword，解析schema\n * @param schema schema\n * @param ajv    ajv的实例\n */\nexport let convertKeys = (schema: JSONSchema6, ajv: Ajv): JSONSchema6 => {\n    schemaKeyWordFactory.forEach((key: string, val: (schema: JSONSchema6, ajv: Ajv) => JSONSchema6) => {\n        schema = val(schema, ajv);\n    });\n\n    return schema;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/factory.ts","/**\n * 实例的工厂类\n */\nexport class BaseFactory<T> {\n    protected instances: { [id: string]: T; } = {};\n    private protectedInstances: { [id: string]: boolean; } = {};\n\n    /**\n     * 添加一个实例\n     * @param name     {string}    实例的名称\n     * @param engine   {IEngine}   实例\n     * @param override {boolean}   是否覆盖\n     * @return         {void}\n     */\n    public add(name: string, intance: T, override = false): boolean | void {\n        if (this.protectedInstances.hasOwnProperty(name)) {\n            return console.error(`name=【${name}】has locked!`);\n        }\n\n        if (!override && this.has(name)) {\n            return console.error(`【${name}】exist!`);\n        }\n        this.instances[name] = intance;\n\n        return true;\n    }\n\n    public has(name: string): boolean {\n        return this.instances.hasOwnProperty(name);\n    }\n\n    /**\n     * 获取一个实例\n     * @param name    {String}  实例标志\n     */\n    public get(name: string): T {\n        if (this.has(name)) {\n            return this.instances[name];\n        }\n\n        throw new Error(`name=[${name}]not exist`);\n    }\n\n    /**\n     * 锁定实例\n     * @param name 实例名称\n     */\n    public lock(name: string): void {\n        if (this.has(name)) {\n            this.protectedInstances[name] = true;\n        }\n    }\n    /**\n     * 解锁实例\n     * @param name 实例名称\n     */\n    public unLock(name: string): void {\n        if (this.has(name)) {\n            delete this.protectedInstances[name];\n        }\n    }\n\n    /**\n     * 遍历所有的元素\n     * @param func 遍历方法\n     */\n    public forEach(func: (key: string, val: T) => any): void {\n        if (!func) {\n            return;\n        }\n\n        for (const key in this.instances) {\n            if (this.instances.hasOwnProperty(key)) {\n                const element = this.instances[key];\n\n                if (func(key, element) === false) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * 清空当前的hash\n     */\n    public clear() {\n        this.instances = {};\n        this.protectedInstances = {};\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/libs/factory.ts","import { ref, oneof } from \"./keys/index\";\nimport { array, none, object } from \"./types/index\";\nimport { BaseFactory } from \"./libs/factory\";\nimport { schemaFieldFactory, schemaKeyWordFactory, schemaTypeFactory, schemaKeysFactory } from \"./factory\";\nimport { FxJsonSchema } from \"./models/jsonschema\";\nimport { UiSchema } from \"./models/uischema\";\nexport { default as ResolveLib } from \"./libs/resolve\";\nexport { default as MergeLib } from \"./libs/merge\";\n\nschemaKeyWordFactory.add(\"ref\", ref);\nschemaKeyWordFactory.add(\"oneof\", oneof);\n\nschemaTypeFactory.add(\"array\", array);\nschemaTypeFactory.add(\"string\", none);\nschemaTypeFactory.add(\"undefined\", none);\nschemaTypeFactory.add(\"number\", none);\nschemaTypeFactory.add(\"null\", none);\nschemaTypeFactory.add(\"any\", none);\nschemaTypeFactory.add(\"integer\", none);\nschemaTypeFactory.add(\"boolean\", none);\nschemaTypeFactory.add(\"object\", object);\n\nexport {\n    FxJsonSchema,\n    UiSchema,\n    BaseFactory,\n    schemaKeysFactory,\n    schemaFieldFactory,\n    schemaKeyWordFactory,\n    schemaTypeFactory\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","export { default as ref } from \"./ref\";\nexport { default as oneof } from \"./oneof\";\n\n\n\n// WEBPACK FOOTER //\n// ./src/keys/index.ts","import { Ajv, ValidateFunction } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { default as ResolveLib } from \"../libs/resolve\";\n\n/**\n * 解析schema中的关键字 ref\n * 如果有$ref关键字，则从ajv中获取$ref的schema\n * 如果ajv中发现了schema，则添加$ref和refKeys，返回schema\n */\nexport default (schema: JSONSchema6, ajv: Ajv) => {\n    if (schema && schema.$ref) {\n        let validate: ValidateFunction = ajv.getSchema(schema.$ref);\n\n        if (validate && validate.schema) {\n            let schemaAjv = Object.assign({}, validate.schema) as JSONSchema6;\n\n            schemaAjv.$ref = schema.$ref;\n            delete schemaAjv.$id;\n\n            Object.assign(schemaAjv, {\n                refKeys: ResolveLib.getDataKeys(schema.$ref)\n            });\n\n            return schemaAjv;\n        } else {\n            throw new Error(\"${schema.$ref} not exist.\");\n        }\n    }\n\n    return schema;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/keys/ref.ts","\nimport { Ajv } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { default as ResolveLib } from \"../libs/resolve\";\nimport MergeLib from \"../libs/merge\";\n\n/**\n * 解析schema中的关键字 oneOf\n * 如果发现有oneOf关键字，遍历替换成schema\n */\nexport default (schema: JSONSchema6, ajv: Ajv): JSONSchema6 => {\n\n    if (!schema) {\n        return schema;\n    }\n\n    let oneOf = schema.oneOf;\n\n    if (oneOf && oneOf.constructor === Array) {\n        schema.oneOf = oneOf.map((schemaOfOne: JSONSchema6) => {\n            let { mergeSchema } = new ResolveLib(ajv, schemaOfOne);\n\n            // if (mergeSchema.$id) {\n            //     mergeSchema.$ref = mergeSchema.$id;\n            //     delete mergeSchema.$id;\n            // }\n\n            return mergeSchema;\n        });\n    }\n\n    return schema;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/keys/oneof.ts","\nexport { default as array } from \"./array\";\nexport { default as object } from \"./object\";\nexport { default as none } from \"./none\";\n\n\n\n// WEBPACK FOOTER //\n// ./src/types/index.ts","import { Ajv } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { default as ResolveLib } from \"../libs/resolve\";\n\n/**\n * 解析schema中的type=array的结构\n * 如果存在items,则继续解析schema.item\n */\nexport default (schema: JSONSchema6, schemaKey: string, ajv: Ajv) => {\n    if (schema.items) {\n        let propertySchemaResolve = new ResolveLib(ajv,\n            schema.items as JSONSchema6,\n            [schemaKey, \"items\"].join(\"/\")\n        );\n\n        const keys: string[] = ResolveLib.getDataKeys([schemaKey, \"items\"].join(\"/\"));\n\n        Object.assign(propertySchemaResolve.mergeSchema, {\n            keys\n        });\n    }\n\n    return schema;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/types/array.ts","import { Ajv } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { default as ResolveLib } from \"../libs/resolve\";\n\n/**\n * 解析schema中的type=object的结构\n * 如果存在schema.properties,则遍历properties，继续解析schema.properties[key]\n */\nexport default (schema: JSONSchema6, schemaKey: string, ajv: Ajv) => {\n    if (schema.properties && !schema.$ref) {\n        Object.keys(schema.properties).forEach((key: string) => {\n\n            if ([\"properties\", \"items\"].indexOf(key) >= 0) {\n                throw new Error(`${key}为保留关键字.`);\n            }\n\n            if (!schema.properties || !schema.properties[key]) {\n                return;\n            }\n\n            let propertySchemaResolve = new ResolveLib(ajv,\n                schema.properties[key] as JSONSchema6,\n                [schemaKey, \"properties\", key].join(\"/\")\n            );\n\n            const keys: string[] = ResolveLib.getDataKeys([schemaKey, \"properties\", key].join(\"/\"));\n\n            Object.assign(propertySchemaResolve.mergeSchema, {\n                keys\n            });\n        });\n    }\n\n    return schema;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/types/object.ts","import { Ajv } from \"ajv\";\nimport { JSONSchema6 } from \"json-schema\";\n\nimport { schemaFieldFactory, schemaKeysFactory, convertKeys } from \"../factory\";\nimport { default as ResolveLib } from \"../libs/resolve\";\n\n/**\n * 解析schema中的type!=array && type!=object的结构\n */\nexport default (schema: JSONSchema6, schemaKey: string, ajv: Ajv) => {\n    const currentSchema = convertKeys(schema, ajv);\n    const keys: string[] = ResolveLib.getDataKeys(schemaKey);\n    const $id = ResolveLib.getSchemaId(schemaKey);\n\n    if (schemaFieldFactory.has(schemaKey)) {\n        if (currentSchema) {\n            (currentSchema as any).resolve = true;\n        }\n        return currentSchema || schema;\n    }\n\n    schemaFieldFactory.add(schemaKey, Object.assign({}, currentSchema || schema, {\n        keys,\n        schemaPath: schemaKey\n    }));\n    schemaKeysFactory.add([$id, ...keys].join(\"/\"), schemaKey);\n\n    return currentSchema || schema;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/types/none.ts","import { Ajv } from \"ajv\";\n\nimport { uiSchemaSchema, UiSchema } from \"../models/uischema\";\nimport { schemaFieldFactory, schemaKeysFactory } from \"../factory\";\nimport { default as ResolveLib } from \"./resolve\";\nimport { FxJsonSchema } from \"../models/jsonschema\";\nimport { JSONSchema6 } from \"json-schema\";\n\n/**\n * 用来转换uiSchema的类\n * 如果有$ref，则直接使用\n */\nexport default class MergeLib {\n    /**\n     * 合并过后的数据\n     */\n    public mergeUiSchemaList: UiSchema[];\n    /**\n     * 当前$id对应的schema\n     */\n    private curSchema: FxJsonSchema;\n    /**\n     * 构造函数\n     * 1. 验证uiSchema的正确性\n     * 2. 处理uiSchema中带*号的数据\n     * 3. 返回合并后的数据\n     * @param ajv         当前的ajv实例\n     * @param $id         schema的$id\n     * @param parent      父亲的schema\n     * @param uiSchemas   uiSchema\n     */\n    constructor(ajv: Ajv, private schemaPath: string, public parent: UiSchema | null = null, private uiSchemas: Array<UiSchema | string> = [\"*\"]) {\n        if (!ajv.validate(uiSchemaSchema, uiSchemas)) {\n            throw ajv.errors;\n        }\n\n        let keyPath: string = ResolveLib.getDataKeys(schemaPath, true).join(\"/\");\n\n        if (!schemaKeysFactory.has(keyPath)) {\n            throw new Error(`${keyPath} not exist or ${keyPath} did not resolve yet.`);\n        }\n\n        this.curSchema = schemaFieldFactory.get(schemaKeysFactory.get(keyPath));\n        if (this.curSchema.$id) {\n            this.curSchema.$ref = this.curSchema.$id;\n            this.curSchema.$id = undefined;\n        }\n        this.mergeUiSchemaList = this.mergeUiSchema();\n\n        // if (this.curSchema.oneOf) {\n        //     this.curSchema.oneOf.map((oneOf: JSONSchema6) => {\n        //         return new merge\n        //     });\n        // }\n    }\n\n    /**\n     * 获取父亲的keys\n     */\n    private getParentSchemaKeys() {\n        if (this.parent) {\n            if (this.parent.keys) {\n                return this.parent.keys;\n            }\n        }\n\n        return [];\n    }\n\n    /**\n     * 根据给出的parentKeys和uiSchemaKeys来获取uiSchema的key\n     * 1. 遍历uiSchemaKeys，分别于parentKeys做合并\n     * 2. 合并后的keys去仓库里面找，如果为找到则报错\n     * 3. 判断找到的schema中是否带有 $ref\n     * 4. 如果有$ref，则更改parentKeys为$ref的路径\n     * 5. 如果没有，则更改parentKeys为当前合并的keys\n     * @param uiSchemaKeys 当前的keys\n     * @param parentKeys   父亲的keys\n     */\n    private getUiSchemaKeyRecursion(uiSchemaKeys: string[], parentKeys: string[]) {\n        while (uiSchemaKeys.length) {\n            let key: string = uiSchemaKeys.shift() || \"\";\n            let keys: string[] = key ? [...parentKeys, key] : parentKeys;\n            let keysStr = keys.join(\"/\").replace(/\\/$/, \"\");\n\n            if (!schemaKeysFactory.has(keysStr)) {\n                console.log(schemaKeysFactory);\n                throw new Error(`${keys.join(\"/\")} did not found. do you forget to resolve schema first.`);\n            }\n\n            let schema: FxJsonSchema = schemaFieldFactory.get(schemaKeysFactory.get(keysStr));\n\n            if (schema.$ref) {\n                parentKeys = ResolveLib.getDataKeys(schema.$ref, true);\n            } else {\n                parentKeys = keys;\n            }\n        }\n\n        return parentKeys.join(\"/\");\n    }\n\n    /**\n     * 获取当前uiSchema的key\n     * 如果没有父亲节点\n     * 默认返回父亲的key+当前uiSchema的key\n     * @param uiSchema uiSchma\n     */\n    private getCurrentSchemaKey(uiSchema: UiSchema) {\n        const $id = ResolveLib.getSchemaId(this.schemaPath);\n        let uiSchemaKeys = uiSchema.key.split(\"/\");\n\n        // 如果父亲节点的shcemaId不是传入的schemaId，则不适用父亲的key做计算\n        if (this.parent && ResolveLib.getSchemaId(this.parent.key) === $id) {\n            return this.getUiSchemaKeyRecursion(uiSchemaKeys, this.parent.key.split(\"/\"));\n        }\n\n        return this.getUiSchemaKeyRecursion(uiSchemaKeys, [$id]);\n    }\n\n    /**\n     * 初始化uiSchema\n     * 如果是字符串；用$id合并之后，获取schema\n     * 如果是【UiSchema】；合并key之后，获取schema\n     * @param uiSchema uiSchema\n     */\n    private initUiSchema(uiSchema: UiSchema): UiSchema {\n        let parentKeys = this.getParentSchemaKeys(),\n            keys;\n\n        keys = parentKeys.concat(uiSchema.key ? uiSchema.key.split(\"/\") : []);\n\n        return Object.assign({}, uiSchema, {\n            key: this.getCurrentSchemaKey(uiSchema),\n            keys\n        });\n    }\n\n    /**\n     * 如果在【schemaKeysFactory】中没有发现uiSchema.key,则报错\n     * 从【schemaKeysFactory】获取对应的schema，与uiSchema合并之后返回\n     * @param uiSchema uiSchema\n     */\n    private mergeUiSchemaToArray(uiSchema: UiSchema) {\n        if (!schemaKeysFactory.has(uiSchema.key)) {\n            throw new Error(`${uiSchema.key} did not found. do you forget to resolve schema first.`);\n        }\n\n        let schemaKey: string = schemaKeysFactory.get(uiSchema.key);\n        let schema = schemaFieldFactory.get(schemaKey);\n\n        return Object.assign({}, schema, uiSchema);\n    }\n\n    /**\n     * 合并uiSchema\n     * 1. 先判断uiSchema中是否存在*\n     * 2. 如果没有*号，则遍历uiSchema，合并数据\n     * 3. 如果存在*号；先合并*之前和*之后的uiSchema\n     * 4. 遍历当前的schema：\n     *    如果是object，则遍历properties，然后合并数据\n     *    如果是array，则直接返回items，然后合并数据\n     */\n    private mergeUiSchema(): UiSchema[] {\n        let idx: number = this.uiSchemas.indexOf(\"*\");\n        let uiSchemasFirst: UiSchema[] = [], uiSchemasLast: UiSchema[] = [];\n        let curSchema = this.curSchema, types = [\"object\", \"array\"];\n\n        // 如果存在多个*，则报错\n        if (this.uiSchemas.lastIndexOf(\"*\") !== idx) {\n            throw new Error(\"uiSchema can only has one *.\");\n        }\n\n        // 不存在*号的情况\n        if (idx < 0) {\n            this.uiSchemas.slice(idx + 1).map((us: string | UiSchema) => {\n                let uiSchema = this.initUiSchema(us.constructor === String ? { key: us } as UiSchema : (us as UiSchema));\n\n                uiSchemasFirst.push(this.mergeUiSchemaToArray(uiSchema));\n            });\n\n            return uiSchemasFirst;\n        }\n\n        // 处理*之前的数据\n        this.uiSchemas.slice(0, idx).forEach((us: string | UiSchema) => {\n            let uiSchema = this.initUiSchema(us.constructor === String ? { key: us } as UiSchema : (us as UiSchema));\n\n            uiSchemasFirst.push(this.mergeUiSchemaToArray(uiSchema));\n        });\n        // 处理*之后的数据\n        this.uiSchemas.slice(idx + 1).forEach((us: string | UiSchema) => {\n            let uiSchema = this.initUiSchema(us.constructor === String ? { key: us } as UiSchema : (us as UiSchema));\n\n            uiSchemasLast.push(this.mergeUiSchemaToArray(uiSchema));\n        });\n\n        // 如果是object类型，遍历properties属性，与之前的数据去重后添加到数组\n        if (curSchema.type === types[0] && curSchema.properties) {\n            Object.keys(curSchema.properties).forEach((us: string) => {\n                let uiSchema = this.initUiSchema({ key: us } as UiSchema);\n\n                if (!uiSchemasFirst.concat(uiSchemasLast).filter((val: UiSchema) => {\n                    return val.key === uiSchema.key;\n                }).length) {\n                    uiSchema = this.mergeUiSchemaToArray(uiSchema);\n                    uiSchemasFirst.push(uiSchema);\n                }\n            });\n        }\n\n        // 如果是数组，获取下一级的key，然后做对比处理\n        if (curSchema.type === types[1] && curSchema.items) {\n            let uiSchema = this.initUiSchema({\n                key: ResolveLib.getDataKeys(curSchema.schemaPath || \"\").join(\"/\")\n            });\n            // let uiSchemaItems = this.initUiSchema(ResolveLib.getDataKeys(this.curSchema.schemaPath).concat([\"-\"]).join(\"/\"));\n\n            if (!uiSchemasFirst.concat(uiSchemasLast).filter((val: UiSchema) => {\n                return val.key === uiSchema.key;\n            }).length) {\n                uiSchema = this.mergeUiSchemaToArray(uiSchema);\n                uiSchemasFirst.push(uiSchema);\n            }\n\n            // if (!uiSchemasFirst.concat(uiSchemasLast).filter((val: UiSchema) => {\n            //     return val.key === uiSchemaItems.key;\n            // }).length) {\n            //     uiSchemaItems = this.mergeUiSchemaToArray(uiSchemaItems);\n            //     uiSchemasFirst.push(uiSchemaItems);\n            // }\n        }\n\n        // 是普通对象\n        if (types.indexOf(curSchema.type as string) < 0) {\n\n            console.log(curSchema, ResolveLib.getDataKeys(curSchema.schemaPath || \"\").join(\"/\"));\n            let uiSchema = this.initUiSchema({\n                key: ResolveLib.getDataKeys(curSchema.schemaPath || \"\", false).join(\"/\")\n            });\n\n            console.log(uiSchema);\n\n            if (!uiSchemasFirst.concat(uiSchemasLast).filter((val: UiSchema) => {\n                return val.key === uiSchema.key;\n            }).length) {\n                uiSchema = this.mergeUiSchemaToArray(uiSchema);\n                uiSchemasFirst.push(uiSchema);\n            }\n        }\n\n        return uiSchemasFirst.concat(uiSchemasLast);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/libs/merge.ts","import { FxJsonSchema , a } from \"./jsonschema\";\n\nlet string = \"string\";\n\n/**\n * uiSchema的模型schema\n */\nexport const uiSchemaSchema = {\n    type: \"array\",\n    items: {\n        anyOf: [{\n            type: string,\n            minLength: a\n        }, {\n            type: \"object\",\n            required: [\"key\"],\n            properties: {\n                key: { type: string }\n            }\n        }]\n    }\n};\n\nexport interface UiSchema extends FxJsonSchema {\n    key: string;\n    keys?: Array<string | number>;\n    children?: Array<UiSchema | string>;\n    refKeys?: string[];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/models/uischema.ts","import { JSONSchema6 } from \"json-schema\";\n\nexport interface FxJsonSchema extends JSONSchema6 {\n    schemaPath?: string;\n}\n\nexport const  a = 1;\n\n\n\n// WEBPACK FOOTER //\n// ./src/models/jsonschema.ts"],"sourceRoot":""}